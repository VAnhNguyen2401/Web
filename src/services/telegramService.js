const TelegramBot = require('node-telegram-bot-api');
const db = require('../models');
require('dotenv').config();

let bot = null;

// T·∫Øt log t·ª´ th∆∞ vi·ªán node-telegram-bot-api
process.env.NTBA_FIX_319 = 1;
process.env.NTBA_FIX_350 = 1;

// Kh·ªüi t·∫°o bot Telegram
try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!bot && token && token !== 'YOUR_TELEGRAM_BOT_TOKEN') {
        // Kh·ªüi t·∫°o bot v·ªõi c√°c c√†i ƒë·∫∑t ƒë·ªÉ tr√°nh log kh√¥ng c·∫ßn thi·∫øt
        bot = new TelegramBot(token, {
            polling: true,
            webHook: false,
            filepath: false  // T·∫Øt th√¥ng b√°o l∆∞u file
        });

        // B·ªè log g·ªëc c·ªßa th∆∞ vi·ªán
        if (bot.hasOwnProperty('_debug')) {
            bot._debug = function () { };
        }

        console.log('‚úÖ Telegram bot ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng');
    } else if (!token || token === 'YOUR_TELEGRAM_BOT_TOKEN') {
        console.log('‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh TELEGRAM_BOT_TOKEN trong file .env');
        // T·∫°o mock bot n·∫øu kh√¥ng c√≥ token
        bot = {
            sendMessage: () => Promise.resolve(),
            onText: () => { },
            on: () => { }
        };
    }
} catch (error) {
    console.error('‚ùå L·ªói kh·ªüi t·∫°o Telegram bot:', error.message);
    // T·∫°o mock bot ƒë·ªÉ tr√°nh l·ªói ·ª©ng d·ª•ng
    bot = {
        sendMessage: () => Promise.resolve(),
        onText: () => { },
        on: () => { }
    };
}

// Format s·ªë ti·ªÅn sang ƒë·ªãnh d·∫°ng VND
const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
    }).format(amount);
};

// Format ng√†y th√°ng sang ƒë·ªãnh d·∫°ng Vi·ªát Nam
const formatDate = (date) => {
    if (!date) return 'N/A';
    return new Date(date).toLocaleDateString('vi-VN');
};

// Li√™n k·∫øt t√†i kho·∫£n ng∆∞·ªùi d√πng v·ªõi chatId Telegram
const linkUserAccount = async (email, chatId) => {
    try {
        // T√¨m ng∆∞·ªùi d√πng theo email (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        const user = await db.User.findOne({
            where: db.sequelize.where(
                db.sequelize.fn('LOWER', db.sequelize.col('email')),
                db.sequelize.fn('LOWER', email)
            )
        });

        if (!user) {
            return { success: false, message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y' };
        }

        // C·∫≠p nh·∫≠t chatId b·∫±ng truy v·∫•n SQL tr·ª±c ti·∫øp ƒë·ªÉ tr√°nh l·ªói
        await db.sequelize.query(
            `UPDATE [Users] SET [telegramChatId] = ? WHERE [id] = ?`,
            {
                replacements: [chatId.toString(), user.id],
                type: db.sequelize.QueryTypes.UPDATE
            }
        );

        return {
            success: true,
            message: 'Li√™n k·∫øt t√†i kho·∫£n th√†nh c√¥ng',
            user: {
                id: user.id,
                name: `${user.firstName} ${user.lastName}`,
                email: user.email
            }
        };
    } catch (error) {
        console.error('‚ùå L·ªói khi li√™n k·∫øt t√†i kho·∫£n:', error);
        return { success: false, message: 'ƒê√£ x·∫£y ra l·ªói khi li√™n k·∫øt t√†i kho·∫£n' };
    }
};

// G·ª≠i th√¥ng b√°o kho·∫£n ph√≠ m·ªõi
const sendNewFeeNotification = async (userId, feeData) => {
    try {
        const user = await db.User.findByPk(userId);
        if (!user || !user.telegramChatId) {
            return false;
        }

        let message = `üîî *TH√îNG B√ÅO KHO·∫¢N PH√ç M·ªöI*\n\n`
            + `K√≠nh g·ª≠i *${user.firstName} ${user.lastName}*,\n\n`
            + `B·∫°n c√≥ m·ªôt kho·∫£n ph√≠ m·ªõi:\n`
            + `- Lo·∫°i ph√≠: *${feeData.feeType}*\n`
            + `- S·ªë ti·ªÅn: *${formatCurrency(feeData.feeAmount)}*\n`;

        if (feeData.dueDate) {
            message += `- H·∫°n thanh to√°n: *${formatDate(feeData.dueDate)}*\n\n`;
        } else {
            message += `\n`;
        }

        message += `Vui l√≤ng thanh to√°n ƒë√∫ng h·∫°n ƒë·ªÉ tr√°nh ph√≠ ph·∫°t.`;

        await bot.sendMessage(user.telegramChatId, message, { parse_mode: 'Markdown' });
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o kho·∫£n ph√≠ m·ªõi:', error.message);
        return false;
    }
};

// G·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng
const sendPaymentSuccessNotification = async (userId, feeData) => {
    try {
        const user = await db.User.findByPk(userId);
        if (!user || !user.telegramChatId) {
            return false;
        }

        const message = `‚úÖ *THANH TO√ÅN TH√ÄNH C√îNG*\n\n`
            + `K√≠nh g·ª≠i *${user.firstName} ${user.lastName}*,\n\n`
            + `C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n:\n`
            + `- Lo·∫°i ph√≠: *${feeData.feeType}*\n`
            + `- S·ªë ti·ªÅn: *${formatCurrency(feeData.feeAmount)}*\n`
            + `- Ng√†y thanh to√°n: *${formatDate(new Date())}*\n\n`
            + `C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!`;

        await bot.sendMessage(user.telegramChatId, message, { parse_mode: 'Markdown' });
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng:', error.message);
        return false;
    }
};

// G·ª≠i nh·∫Øc nh·ªü thanh to√°n
const sendPaymentReminder = async (userId, feeData) => {
    try {
        const user = await db.User.findByPk(userId);
        if (!user || !user.telegramChatId) {
            return false;
        }

        let message = `‚ö†Ô∏è *NH·∫ÆC NH·ªû THANH TO√ÅN*\n\n`
            + `K√≠nh g·ª≠i *${user.firstName} ${user.lastName}*,\n\n`
            + `B·∫°n c√≥ m·ªôt kho·∫£n ph√≠ c·∫ßn thanh to√°n:\n`
            + `- Lo·∫°i ph√≠: *${feeData.feeType}*\n`
            + `- S·ªë ti·ªÅn: *${formatCurrency(feeData.feeAmount)}*\n`;

        if (feeData.dueDate) {
            message += `- H·∫°n thanh to√°n: *${formatDate(feeData.dueDate)}*\n\n`;
        } else {
            message += `\n`;
        }

        message += `Vui l√≤ng thanh to√°n ƒë·ªÉ tr√°nh ph√≠ ph·∫°t.`;

        await bot.sendMessage(user.telegramChatId, message, { parse_mode: 'Markdown' });
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói g·ª≠i nh·∫Øc nh·ªü thanh to√°n:', error.message);
        return false;
    }
};

// Thi·∫øt l·∫≠p bot commands
if (bot && typeof bot.onText === 'function') {
    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu chat v·ªõi bot - l·ªánh /start
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        const message = `üëã *Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi H·ªá th·ªëng thu ph√≠ chung c∆∞*\n\n`
            + `ƒê·ªÉ k·∫øt n·ªëi v·ªõi t√†i kho·∫£n c·ªßa b·∫°n, vui l√≤ng g·ª≠i email b·∫°n ƒë√£ ƒëƒÉng k√Ω v·ªõi h·ªá th·ªëng.\n\n`
            + `_V√≠ d·ª•: nguoidung@gmail.com_`;

        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    });

    // L·ªánh tr·ª£ gi√∫p - /help
    bot.onText(/\/help/, async (msg) => {
        const chatId = msg.chat.id;
        const message = `*Tr·ª£ gi√∫p s·ª≠ d·ª•ng bot*\n\n`
            + `- G·ª≠i email ƒë√£ ƒëƒÉng k√Ω ƒë·ªÉ li√™n k·∫øt t√†i kho·∫£n\n`
            + `- S·ª≠ d·ª•ng l·ªánh /status ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i li√™n k·∫øt\n`
            + `- S·ª≠ d·ª•ng l·ªánh /unlink ƒë·ªÉ h·ªßy li√™n k·∫øt t√†i kho·∫£n\n`
            + `- S·ª≠ d·ª•ng l·ªánh /help ƒë·ªÉ xem tr·ª£ gi√∫p`;

        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    });

    // Ki·ªÉm tra tr·∫°ng th√°i li√™n k·∫øt - /status
    bot.onText(/\/status/, async (msg) => {
        const chatId = msg.chat.id;

        try {
            // T√¨m ng∆∞·ªùi d√πng c√≥ telegramChatId t∆∞∆°ng ·ª©ng
            const user = await db.User.findOne({
                where: { telegramChatId: chatId.toString() }
            });

            if (user) {
                const message = `‚úÖ *Tr·∫°ng th√°i li√™n k·∫øt*\n\n`
                    + `T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt:\n`
                    + `- T√™n: *${user.firstName} ${user.lastName}*\n`
                    + `- Email: *${user.email}*\n`
                    + `- Vai tr√≤: *${user.role}*`;

                await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
            } else {
                await bot.sendMessage(chatId,
                    '‚ùå B·∫°n ch∆∞a li√™n k·∫øt t√†i kho·∫£n. Vui l√≤ng g·ª≠i email ƒë√£ ƒëƒÉng k√Ω ƒë·ªÉ li√™n k·∫øt.',
                    { parse_mode: 'Markdown' });
            }
        } catch (error) {
            console.error('‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i:', error.message);
            await bot.sendMessage(chatId, '‚ùå ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra tr·∫°ng th√°i li√™n k·∫øt.');
        }
    });

    // H·ªßy li√™n k·∫øt t√†i kho·∫£n - /unlink
    bot.onText(/\/unlink/, async (msg) => {
        const chatId = msg.chat.id;

        try {
            // T√¨m ng∆∞·ªùi d√πng c√≥ telegramChatId t∆∞∆°ng ·ª©ng
            const user = await db.User.findOne({
                where: { telegramChatId: chatId.toString() }
            });

            if (user) {
                // C·∫≠p nh·∫≠t ƒë·ªÉ x√≥a telegramChatId
                await db.sequelize.query(
                    `UPDATE [Users] SET [telegramChatId] = NULL WHERE [id] = ?`,
                    {
                        replacements: [user.id],
                        type: db.sequelize.QueryTypes.UPDATE
                    }
                );

                await bot.sendMessage(chatId,
                    '‚úÖ ƒê√£ h·ªßy li√™n k·∫øt t√†i kho·∫£n th√†nh c√¥ng. B·∫°n s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o n·ªØa.',
                    { parse_mode: 'Markdown' });
            } else {
                await bot.sendMessage(chatId,
                    '‚ùå B·∫°n ch∆∞a li√™n k·∫øt t√†i kho·∫£n n√†o.',
                    { parse_mode: 'Markdown' });
            }
        } catch (error) {
            console.error('‚ùå L·ªói h·ªßy li√™n k·∫øt:', error.message);
            await bot.sendMessage(chatId, '‚ùå ƒê√£ x·∫£y ra l·ªói khi h·ªßy li√™n k·∫øt t√†i kho·∫£n.');
        }
    });

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i email
    bot.on('message', async (msg) => {
        // B·ªè qua c√°c l·ªánh ƒë√£ x·ª≠ l√Ω ·ªü tr√™n
        if (msg.text && (msg.text.startsWith('/') || msg.text === '/start')) return;

        const chatId = msg.chat.id;
        const text = msg.text ? msg.text.trim() : '';

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (emailRegex.test(text)) {
            // Th·ª±c hi·ªán li√™n k·∫øt t√†i kho·∫£n
            const result = await linkUserAccount(text, chatId);

            if (result.success) {
                const message = `‚úÖ *Li√™n k·∫øt t√†i kho·∫£n th√†nh c√¥ng!*\n\n`
                    + `T√†i kho·∫£n: *${result.user.name}*\n`
                    + `Email: *${result.user.email}*\n\n`
                    + `T·ª´ gi·ªù b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o v·ªÅ:\n`
                    + `- Kho·∫£n ph√≠ m·ªõi\n`
                    + `- Nh·∫Øc nh·ªü thanh to√°n\n`
                    + `- X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng\n\n`
                    + `C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!`;

                await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
            } else {
                await bot.sendMessage(chatId,
                    `‚ùå ${result.message}. Vui l√≤ng ki·ªÉm tra l·∫°i email ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.`,
                    { parse_mode: 'Markdown' });
            }
        } else if (text) {
            // N·∫øu kh√¥ng ph·∫£i email, h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
            await bot.sendMessage(chatId,
                '‚ùå Vui l√≤ng g·ª≠i email h·ª£p l·ªá ƒë·ªÉ li√™n k·∫øt t√†i kho·∫£n.\n\nV√≠ d·ª•: nguoidung@gmail.com',
                { parse_mode: 'Markdown' });
        }
    });
}

module.exports = {
    sendNewFeeNotification,
    sendPaymentSuccessNotification,
    sendPaymentReminder
}; 