import db from "../models";
const emailService = require('../services/emailService');

// Test database connection and table names
let testDatabaseConnection = async () => {
    try {
        console.log("üîç Testing database connection...");

        // Test basic connection
        await db.sequelize.authenticate();
        console.log("‚úÖ Database connection successful");

        // Test Users table
        const userCount = await db.sequelize.query("SELECT COUNT(*) as count FROM Users", {
            type: db.sequelize.QueryTypes.SELECT
        });
        console.log(`üë• Users table: ${userCount[0].count} records`);

        // Test Canho table
        try {
            const apartmentCount = await db.sequelize.query("SELECT COUNT(*) as count FROM Canho", {
                type: db.sequelize.QueryTypes.SELECT
            });
            console.log(`üè† Canho table: ${apartmentCount[0].count} records`);
        } catch (e) {
            console.log("‚ö†Ô∏è  Canho table might not exist:", e.message);
        }

        // Test Fees table
        try {
            const feeCount = await db.sequelize.query("SELECT COUNT(*) as count FROM Fees", {
                type: db.sequelize.QueryTypes.SELECT
            });
            console.log(`üí∞ Fees table: ${feeCount[0].count} records`);
        } catch (e) {
            console.log("‚ö†Ô∏è  Fees table might not exist:", e.message);
        }

        return true;
    } catch (error) {
        console.error("‚ùå Database connection test failed:", error);
        return false;
    }
};

let getAdminFeePage = async (req, res) => {
    try {
        console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫£i trang qu·∫£n l√Ω kho·∫£n thu...");

        // Test database connection first
        const dbOk = await testDatabaseConnection();
        if (!dbOk) {
            throw new Error("Database connection failed");
        }

        // Fetch all users with their fees and apartment information
        const users = await db.sequelize.query(
            `SELECT 
                u.id, u.firstName, u.lastName, u.email, u.role, u.phoneNumber,
                u.createdAt, u.updatedAt,
                c.ApartmentID, c.Area, c.Use_Status,
                f.id as feeId, f.feeType, f.feeAmount, f.feeDescription, 
                f.feeStatus, f.feeCreatedAt
             FROM Users u
             LEFT JOIN Canho c ON u.id = c.id
             LEFT JOIN Fees f ON u.id = f.userId
             WHERE u.role != 'admin'
             ORDER BY u.firstName, u.lastName, f.feeCreatedAt DESC`,
            {
                type: db.sequelize.QueryTypes.SELECT,
                logging: console.log
            }
        );

        console.log(`üìä Query tr·∫£ v·ªÅ ${users.length} records`);

        if (users.length === 0) {
            console.log("‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu user n√†o (c√≥ th·ªÉ do l·ªói database ho·∫∑c ch∆∞a c√≥ data)");
        }

        // Group fees by user
        const userMap = new Map();

        users.forEach(row => {
            const userId = row.id;

            if (!userMap.has(userId)) {
                // Ch·ªâ t·∫°o apartment object n·∫øu user c√≥ cƒÉn h·ªô
                const apartmentInfo = row.ApartmentID ? {
                    id: row.ApartmentID,
                    area: row.Area,
                    useStatus: row.Use_Status
                } : null;

                userMap.set(userId, {
                    id: row.id,
                    firstName: row.firstName,
                    lastName: row.lastName,
                    fullName: `${row.firstName} ${row.lastName}`,
                    email: row.email,
                    role: row.role,
                    phoneNumber: row.phoneNumber,
                    createdAt: new Date(row.createdAt).toLocaleDateString('vi-VN'),
                    updatedAt: new Date(row.updatedAt).toLocaleDateString('vi-VN'),
                    apartment: apartmentInfo,
                    Fees: []
                });
            }

            // Add fee if exists
            if (row.feeId) {
                userMap.get(userId).Fees.push({
                    id: row.feeId,
                    feeType: row.feeType,
                    feeAmount: row.feeAmount,
                    feeDescription: row.feeDescription,
                    feeStatus: row.feeStatus,
                    feeCreatedAt: row.feeCreatedAt
                });
            }
        });

        const transformedUsers = Array.from(userMap.values());

        console.log(`ƒê√£ t·∫£i th√†nh c√¥ng ${transformedUsers.length} ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉn th·ªã trang qu·∫£n l√Ω kho·∫£n thu`);
        console.log(`S·ªë ng∆∞·ªùi d√πng c√≥ cƒÉn h·ªô: ${transformedUsers.filter(u => u.apartment).length}`);

        console.log("‚úÖ Chu·∫©n b·ªã render trang v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω");

        return res.render("admin/fee-management.ejs", {
            users: transformedUsers
        });
    } catch (e) {
        console.error("‚ùå L·ªói khi t·∫£i trang qu·∫£n l√Ω kho·∫£n thu:");
        console.error("üìç Chi ti·∫øt l·ªói:", e);
        console.error("üìä Stack trace:", e.stack);

        // Tr·∫£ v·ªÅ th√¥ng tin l·ªói chi ti·∫øt h∆°n
        return res.status(500).send(`
            <h2>L·ªói khi t·∫£i trang qu·∫£n l√Ω kho·∫£n thu</h2>
            <p><strong>L·ªói:</strong> ${e.message}</p>
            <p><strong>Chi ti·∫øt:</strong> ${e.stack}</p>
            <p><a href="/admin/user">‚Üê Quay l·∫°i trang qu·∫£n l√Ω user</a></p>
            <p><a href="/homepage">‚Üê V·ªÅ trang ch·ªß</a></p>
        `);
    }
}

let createFee = async (req, res) => {
    try {
        console.log("ƒêang x·ª≠ l√Ω y√™u c·∫ßu t·∫°o kho·∫£n ph√≠ m·ªõi...");
        let { feeName, feeAmount, feeDescription, userId } = req.body;
        console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", { feeName, feeAmount, feeDescription, userId });

        // Validate required fields
        if (!feeName || !feeAmount || !userId) {
            console.log("Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc:", { feeName, feeAmount, userId });
            return res.status(400).send("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin");
        }

        // T√¨m th√¥ng tin user v√† cƒÉn h·ªô c·ªßa user ƒë√≥
        const userInfo = await db.sequelize.query(
            `SELECT 
                u.id, u.firstName, u.lastName, u.email,
                c.ApartmentID, c.Area, c.Use_Status
             FROM Users u
             LEFT JOIN Canho c ON u.id = c.id
             WHERE u.id = :userId`,
            {
                replacements: { userId: userId },
                type: db.sequelize.QueryTypes.SELECT
            }
        );

        if (userInfo.length === 0) {
            console.log("User kh√¥ng t·ªìn t·∫°i:", userId);
            return res.status(400).send("User kh√¥ng t·ªìn t·∫°i");
        }

        const user = userInfo[0];
        console.log(`T·∫°o kho·∫£n thu cho user: ${user.firstName} ${user.lastName} (${user.email})`);

        // ƒê·∫£m b·∫£o feeAmount l√† s·ªë
        feeAmount = parseFloat(feeAmount);
        if (isNaN(feeAmount) || feeAmount <= 0) {
            console.log("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá:", feeAmount);
            return res.status(400).send("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá");
        }

        // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë ti·ªÅn ƒë·ªÉ tr√°nh overflow
        if (feeAmount > 999999999) {
            console.log("S·ªë ti·ªÅn qu√° l·ªõn:", feeAmount);
            return res.status(400).send("S·ªë ti·ªÅn qu√° l·ªõn, vui l√≤ng nh·∫≠p gi√° tr·ªã nh·ªè h∆°n 1 t·ª∑");
        }

        try {
            // T·∫°o ng√†y hi·ªán t·∫°i v√† ng√†y h·∫°n ch√≥t (15 ng√†y sau)
            const currentDate = new Date();
            const deadlineDate = new Date(currentDate);
            deadlineDate.setDate(deadlineDate.getDate() + 15);

            console.log("D·ªØ li·ªáu ng√†y th√°ng:", {
                currentDate: currentDate.toISOString(),
                deadlineDate: deadlineDate.toISOString()
            });

            // S·ª≠ d·ª•ng SQL query v·ªõi tham s·ªë ƒë∆∞·ª£c ƒë·∫∑t t√™n r√µ r√†ng
            const insertQuery = `
                INSERT INTO Fees (
                    feeType, feeAmount, feeDescription, feeStatus, 
                    userId, feeCreatedBy, feeUpdatedBy, feeDate,
                    feeCreatedAt, feeUpdatedAt, deadline, lateFee, isOverdue
                ) 
                VALUES (
                    :feeType, :feeAmount, :feeDescription, :feeStatus, 
                    :userId, :feeCreatedBy, :feeUpdatedBy, GETDATE(),
                    GETDATE(), GETDATE(), DATEADD(day, 15, GETDATE()), :lateFee, :isOverdue
                );
                SELECT SCOPE_IDENTITY() AS id;
            `;

            // Th·ª±c hi·ªán truy v·∫•n v·ªõi tham s·ªë
            const [results] = await db.sequelize.query(insertQuery, {
                replacements: {
                    feeType: feeName,
                    feeAmount: feeAmount.toString(),
                    feeDescription: feeDescription || '',
                    feeStatus: 'ch∆∞a thanh to√°n',
                    userId: userId,
                    feeCreatedBy: req.session.user.email,
                    feeUpdatedBy: req.session.user.email,
                    lateFee: '0',
                    isOverdue: 0
                },
                type: db.sequelize.QueryTypes.INSERT,
                logging: console.log
            });

            // L·∫•y ID c·ªßa kho·∫£n ph√≠ v·ª´a t·∫°o
            const feeId = results[0]?.id || results;
            console.log("Kho·∫£n ph√≠ m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID:", feeId);

            // G·ª≠i email th√¥ng b√°o cho user
            try {
                const userEmailInfo = {
                    id: user.id,
                    firstName: user.firstName,
                    lastName: user.lastName,
                    email: user.email
                };

                const feeInfo = {
                    feeType: feeName,
                    feeAmount: feeAmount,
                    feeDescription: feeDescription,
                    deadline: deadlineDate,
                    apartmentId: user.ApartmentID,
                    apartmentArea: user.Area
                };

                // G·ª≠i email th√¥ng b√°o
                const emailResult = await emailService.sendFeeNotification(userEmailInfo, feeInfo);
                if (emailResult.success) {
                    console.log(`‚úÖ Email th√¥ng b√°o kho·∫£n thu ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi ${user.email}`);
                } else {
                    console.log(`‚ùå Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o t·ªõi ${user.email}:`, emailResult.error);
                }
            } catch (emailError) {
                console.error("L·ªói khi g·ª≠i email th√¥ng b√°o:", emailError);
                // Kh√¥ng return error v√¨ kho·∫£n thu ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
            }

            return res.redirect('/admin/fee');
        } catch (dbError) {
            console.error("L·ªói khi l∆∞u kho·∫£n ph√≠ v√†o database:", dbError);
            return res.status(500).send("C√≥ l·ªói x·∫£y ra khi t·∫°o ph√≠. L·ªói c∆° s·ªü d·ªØ li·ªáu: " + dbError.message);
        }
    } catch (e) {
        console.error("L·ªói t·ªïng th·ªÉ khi t·∫°o ph√≠:", e);
        return res.status(500).send("C√≥ l·ªói x·∫£y ra khi t·∫°o ph√≠: " + e.message);
    }
}

let updateFeeStatus = async (req, res) => {
    try {
        const feeId = req.params.id;
        const fee = await db.Fee.findByPk(feeId);

        if (!fee) {
            return res.status(404).send("Kh√¥ng t√¨m th·∫•y kho·∫£n thu.");
        }

        // Thay ƒë·ªïi status v√† c·∫≠p nh·∫≠t th√¥ng tin
        const newStatus = fee.feeStatus === 'ch∆∞a thanh to√°n' ? 'ƒë√£ thanh to√°n' : 'ch∆∞a thanh to√°n';

        // S·ª≠ d·ª•ng SQL query tr·ª±c ti·∫øp thay v√¨ update ORM
        await db.sequelize.query(
            `UPDATE Fees 
             SET feeStatus = :newStatus, feeUpdatedBy = :updatedBy 
             WHERE id = :feeId`,
            {
                replacements: {
                    newStatus: newStatus,
                    updatedBy: req.session.user.email,
                    feeId: feeId
                },
                type: db.Sequelize.QueryTypes.UPDATE
            }
        );

        return res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng" });
    } catch (e) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", e);
        return res.status(500).send("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i.");
    }
}

// H√†m t·∫°o ph√≠ d·ªãch v·ª• h√†ng th√°ng cho t·∫•t c·∫£ cƒÉn h·ªô ƒëang ·ªü
let createMonthlyServiceFee = async (req, res) => {
    try {
        const { pricePerSqm, feeDescription } = req.body;

        // S·ª≠ d·ª•ng gi√° m·∫∑c ƒë·ªãnh 16,500 VNƒê/m¬≤ n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
        const price = pricePerSqm ? parseFloat(pricePerSqm) : 16500;

        if (price <= 0) {
            return res.status(400).json({ error: "Gi√° d·ªãch v·ª• ph·∫£i l·ªõn h∆°n 0" });
        }

        // L·∫•y danh s√°ch t·∫•t c·∫£ cƒÉn h·ªô ƒëang ·ªü c√≥ ch·ªß s·ªü h·ªØu
        const occupiedApartments = await db.sequelize.query(
            `SELECT 
                c.ApartmentID, c.Area, c.id as userId,
                u.firstName, u.lastName, u.email
             FROM Canho c
             INNER JOIN Users u ON c.id = u.id
             WHERE c.Use_Status = N'ƒêang ·ªü' AND c.id IS NOT NULL`,
            {
                type: db.sequelize.QueryTypes.SELECT
            }
        );

        if (occupiedApartments.length === 0) {
            return res.status(400).json({ error: "Kh√¥ng c√≥ cƒÉn h·ªô n√†o ƒëang ·ªü ƒë·ªÉ t·∫°o ph√≠ d·ªãch v·ª•" });
        }

        // T·∫°o ph√≠ d·ªãch v·ª• cho t·ª´ng cƒÉn h·ªô
        const results = [];
        const currentMonth = new Date().getMonth() + 1;
        const currentYear = new Date().getFullYear();

        for (const apartment of occupiedApartments) {
            const serviceAmount = Math.round(apartment.Area * price);
            const description = feeDescription ||
                `Ph√≠ d·ªãch v·ª• th√°ng ${currentMonth}/${currentYear} - ${apartment.ApartmentID} (${apartment.Area}m¬≤ √ó ${price.toLocaleString('vi-VN')} VNƒê/m¬≤)`;

            try {
                const insertQuery = `
                    INSERT INTO Fees (
                        feeType, feeAmount, feeDescription, feeStatus, 
                        userId, feeCreatedBy, feeUpdatedBy, feeDate,
                        feeCreatedAt, feeUpdatedAt, deadline, lateFee, isOverdue
                    ) 
                    VALUES (
                        N'Ph√≠ d·ªãch v·ª•', :feeAmount, :feeDescription, N'ch∆∞a thanh to√°n', 
                        :userId, :feeCreatedBy, :feeUpdatedBy, GETDATE(),
                        GETDATE(), GETDATE(), DATEADD(day, 15, GETDATE()), 0, 0
                    )
                `;

                await db.sequelize.query(insertQuery, {
                    replacements: {
                        feeAmount: serviceAmount,
                        feeDescription: description,
                        userId: apartment.userId,
                        feeCreatedBy: req.session.user.email,
                        feeUpdatedBy: req.session.user.email
                    },
                    type: db.sequelize.QueryTypes.INSERT
                });

                results.push({
                    apartmentId: apartment.ApartmentID,
                    userName: `${apartment.firstName} ${apartment.lastName}`,
                    area: apartment.Area,
                    amount: serviceAmount,
                    userInfo: {
                        id: apartment.userId,
                        firstName: apartment.firstName,
                        lastName: apartment.lastName,
                        email: apartment.email
                    },
                    feeInfo: {
                        feeType: 'Ph√≠ d·ªãch v·ª•',
                        feeAmount: serviceAmount,
                        feeDescription: description,
                        deadline: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000) // 15 ng√†y sau
                    }
                });

            } catch (error) {
                console.error(`L·ªói t·∫°o ph√≠ cho cƒÉn h·ªô ${apartment.ApartmentID}:`, error);
            }
        }

        // G·ª≠i email th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
        try {
            const notifications = results.map(result => ({
                userInfo: result.userInfo,
                feeInfo: result.feeInfo
            }));

            const emailResults = await emailService.sendBulkFeeNotifications(notifications);
            const emailSuccessCount = emailResults.filter(r => r.success).length;

            console.log(`‚úÖ ƒê√£ g·ª≠i ${emailSuccessCount}/${emailResults.length} email th√¥ng b√°o ph√≠ d·ªãch v·ª•`);
        } catch (emailError) {
            console.error("L·ªói khi g·ª≠i email th√¥ng b√°o ph√≠ d·ªãch v·ª•:", emailError);
        }

        return res.status(200).json({
            success: true,
            message: `ƒê√£ t·∫°o ph√≠ d·ªãch v·ª• th√†nh c√¥ng cho ${results.length} cƒÉn h·ªô ƒëang ·ªü`,
            details: results.map(r => ({
                apartmentId: r.apartmentId,
                userName: r.userName,
                area: r.area,
                amount: r.amount
            })),
            summary: {
                totalApartments: results.length,
                totalAmount: results.reduce((sum, item) => sum + item.amount, 0),
                pricePerSqm: price
            }
        });

    } catch (error) {
        console.error("L·ªói khi t·∫°o ph√≠ d·ªãch v·ª• h√†ng th√°ng:", error);
        return res.status(500).json({
            success: false,
            error: "C√≥ l·ªói x·∫£y ra khi t·∫°o ph√≠ d·ªãch v·ª•: " + error.message
        });
    }
};

// L·∫•y th√¥ng tin cƒÉn h·ªô c·ªßa user ƒë·ªÉ t√≠nh ph√≠ d·ªãch v·ª•
let getUserApartmentInfo = async (req, res) => {
    try {
        const userId = req.params.userId;

        if (!userId) {
            return res.status(400).json({ error: "Thi·∫øu userId" });
        }

        // L·∫•y th√¥ng tin cƒÉn h·ªô c·ªßa user
        const apartmentInfo = await db.sequelize.query(
            `SELECT 
                c.ApartmentID, c.Area, c.Use_Status,
                u.firstName, u.lastName, u.email
             FROM Users u
             LEFT JOIN Canho c ON u.id = c.id
             WHERE u.id = :userId`,
            {
                replacements: { userId: userId },
                type: db.sequelize.QueryTypes.SELECT
            }
        );

        if (apartmentInfo.length === 0) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y user" });
        }

        const user = apartmentInfo[0];

        if (!user.ApartmentID) {
            return res.status(400).json({
                error: "User n√†y ch∆∞a c√≥ cƒÉn h·ªô",
                hasApartment: false
            });
        }

        // T√≠nh ph√≠ d·ªãch v·ª•: di·ªán t√≠ch √ó 16,500 VNƒê/m¬≤
        const SERVICE_PRICE_PER_SQM = 16500;
        const serviceFee = Math.round(user.Area * SERVICE_PRICE_PER_SQM);

        return res.status(200).json({
            success: true,
            user: {
                id: userId,
                name: `${user.firstName} ${user.lastName}`,
                email: user.email
            },
            apartment: {
                id: user.ApartmentID,
                area: user.Area,
                useStatus: user.Use_Status
            },
            serviceFee: {
                amount: serviceFee,
                pricePerSqm: SERVICE_PRICE_PER_SQM,
                calculation: `${user.Area}m¬≤ √ó ${SERVICE_PRICE_PER_SQM.toLocaleString('vi-VN')} VNƒê/m¬≤`
            }
        });

    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin cƒÉn h·ªô:", error);
        return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin cƒÉn h·ªô: " + error.message });
    }
};

// T·∫°o ph√≠ internet cho t·∫•t c·∫£ cƒÉn h·ªô
let createInternetFeeForAll = async (req, res) => {
    try {
        console.log("ƒêang t·∫°o ph√≠ internet cho t·∫•t c·∫£ cƒÉn h·ªô...");

        const INTERNET_FEE = 150000; // 150,000 VNƒê c·ªë ƒë·ªãnh

        // L·∫•y danh s√°ch t·∫•t c·∫£ user c√≥ cƒÉn h·ªô ƒêANG ·ªû
        const usersWithApartments = await db.sequelize.query(
            `SELECT 
                u.id as userId, u.firstName, u.lastName, u.email,
                c.ApartmentID, c.Area, c.Use_Status
             FROM Users u
             INNER JOIN Canho c ON u.id = c.id
             WHERE u.role = 'user' AND c.ApartmentID IS NOT NULL AND c.Use_Status = N'ƒêang ·ªü'`,
            {
                type: db.sequelize.QueryTypes.SELECT
            }
        );

        if (usersWithApartments.length === 0) {
            return res.status(400).json({
                error: "Kh√¥ng c√≥ cƒÉn h·ªô n√†o ƒëang ·ªü ƒë·ªÉ t·∫°o ph√≠ internet",
                success: false
            });
        }

        // T·∫°o ph√≠ internet cho t·ª´ng user
        const results = [];
        const currentMonth = new Date().getMonth() + 1;
        const currentYear = new Date().getFullYear();

        for (const user of usersWithApartments) {
            const description = `Ph√≠ internet th√°ng ${currentMonth}/${currentYear} - CƒÉn h·ªô ${user.ApartmentID} - 150,000 VNƒê`;

            try {
                const insertQuery = `
                    INSERT INTO Fees (
                        feeType, feeAmount, feeDescription, feeStatus, 
                        userId, feeCreatedBy, feeUpdatedBy, feeDate,
                        feeCreatedAt, feeUpdatedAt, deadline, lateFee, isOverdue
                    ) 
                    VALUES (
                        N'Ph√≠ internet', :feeAmount, :feeDescription, N'ch∆∞a thanh to√°n', 
                        :userId, :feeCreatedBy, :feeUpdatedBy, GETDATE(),
                        GETDATE(), GETDATE(), DATEADD(day, 15, GETDATE()), 0, 0
                    )
                `;

                await db.sequelize.query(insertQuery, {
                    replacements: {
                        feeAmount: INTERNET_FEE,
                        feeDescription: description,
                        userId: user.userId,
                        feeCreatedBy: req.session.user.email,
                        feeUpdatedBy: req.session.user.email
                    },
                    type: db.sequelize.QueryTypes.INSERT
                });

                results.push({
                    userId: user.userId,
                    userName: `${user.firstName} ${user.lastName}`,
                    apartmentId: user.ApartmentID,
                    amount: INTERNET_FEE,
                    userInfo: {
                        id: user.userId,
                        firstName: user.firstName,
                        lastName: user.lastName,
                        email: user.email
                    },
                    feeInfo: {
                        feeType: 'Ph√≠ internet',
                        feeAmount: INTERNET_FEE,
                        feeDescription: description,
                        deadline: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000) // 15 ng√†y sau
                    }
                });

            } catch (error) {
                console.error(`L·ªói t·∫°o ph√≠ internet cho user ${user.userId}:`, error);
            }
        }

        // G·ª≠i email th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
        try {
            const notifications = results.map(result => ({
                userInfo: result.userInfo,
                feeInfo: result.feeInfo
            }));

            const emailResults = await emailService.sendBulkFeeNotifications(notifications);
            const emailSuccessCount = emailResults.filter(r => r.success).length;

            console.log(`‚úÖ ƒê√£ g·ª≠i ${emailSuccessCount}/${emailResults.length} email th√¥ng b√°o ph√≠ internet`);
        } catch (emailError) {
            console.error("L·ªói khi g·ª≠i email th√¥ng b√°o ph√≠ internet:", emailError);
        }

        return res.status(200).json({
            success: true,
            message: `ƒê√£ t·∫°o ph√≠ internet th√†nh c√¥ng cho ${results.length} cƒÉn h·ªô ƒëang ·ªü`,
            details: results,
            summary: {
                totalApartments: results.length,
                totalAmount: results.length * INTERNET_FEE,
                feePerApartment: INTERNET_FEE
            }
        });

    } catch (error) {
        console.error("L·ªói khi t·∫°o ph√≠ internet h√†ng lo·∫°t:", error);
        return res.status(500).json({
            error: "C√≥ l·ªói x·∫£y ra khi t·∫°o ph√≠ internet: " + error.message,
            success: false
        });
    }
};

module.exports = {
    getAdminFeePage,
    createFee,
    updateFeeStatus,
    createMonthlyServiceFee,
    getUserApartmentInfo,
    createInternetFeeForAll
};